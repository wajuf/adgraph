diff --git a/BUILD.gn b/BUILD.gn
index 10fee26420..b363e9349e 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -1917,6 +1917,7 @@ v8_source_set("v8_compiler") {
   sources = v8_compiler_sources
 
   public_deps = [
+    "//brave/third_party/blink/brave_page_graph",
     ":generate_bytecode_builtins_list",
     ":run_torque",
     ":v8_maybe_icu",
diff --git a/include/v8.h b/include/v8.h
index b4b920555b..2b6288622e 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -26,6 +26,13 @@
 #include "v8-version.h"   // NOLINT(build/include)
 #include "v8config.h"     // NOLINT(build/include)
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+namespace brave_page_graph {
+class PageGraph;
+}
+#endif
+
 // We reserve the V8_* prefix for macros defined in V8 public API and
 // assume there are no name conflicts with the embedder's code.
 
@@ -8599,6 +8606,11 @@ class V8_EXPORT Isolate {
   void operator delete(void*, size_t) = delete;
   void operator delete[](void*, size_t) = delete;
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  void SetPageGraph(::brave_page_graph::PageGraph* page_graph);
+  ::brave_page_graph::PageGraph* GetPageGraph() const;
+#endif
+
  private:
   template <class K, class V, class Traits>
   friend class PersistentValueMapBase;
diff --git a/src/api.cc b/src/api.cc
index a52fadc2ee..453a328353 100644
--- a/src/api.cc
+++ b/src/api.cc
@@ -125,6 +125,11 @@
 #endif  // V8_TARGET_ARCH_X64
 #endif  // V8_OS_WIN
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace v8 {
 
 /*
@@ -8934,6 +8939,18 @@ void v8::Isolate::LocaleConfigurationChangeNotification() {
 #endif  // V8_INTL_SUPPORT
 }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+void v8::Isolate::SetPageGraph(::brave_page_graph::PageGraph* page_graph) {
+  i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(this);
+  i_isolate->SetPageGraphInternal(page_graph);
+}
+
+::brave_page_graph::PageGraph* v8::Isolate::GetPageGraph() const {
+  const i::Isolate* i_isolate = reinterpret_cast<const i::Isolate*>(this);
+  return i_isolate->GetPageGraphInternal();
+}
+#endif
+
 // static
 std::unique_ptr<MicrotaskQueue> MicrotaskQueue::New(Isolate* isolate,
                                                     MicrotasksPolicy policy) {
diff --git a/src/compiler.cc b/src/compiler.cc
index d3cebfd58e..85b103cce5 100644
--- a/src/compiler.cc
+++ b/src/compiler.cc
@@ -42,6 +42,13 @@
 #include "src/vm-state-inl.h"
 #include "src/zone/zone-list-inl.h"  // crbug.com/v8/8816
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include <string>
+#include "src/string-stream.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace v8 {
 namespace internal {
 
diff --git a/src/isolate.cc b/src/isolate.cc
index 8e15e78109..361b9d21cd 100644
--- a/src/isolate.cc
+++ b/src/isolate.cc
@@ -89,6 +89,11 @@
 #include "src/unwinding-info-win64.h"
 #endif
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 extern "C" const uint8_t* v8_Default_embedded_blob_;
 extern "C" uint32_t v8_Default_embedded_blob_size_;
 
@@ -4597,6 +4602,16 @@ void Isolate::SetIdle(bool is_idle) {
   }
 }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+void Isolate::SetPageGraphInternal(::brave_page_graph::PageGraph* page_graph) {
+  page_graph_ = page_graph;
+}
+
+::brave_page_graph::PageGraph* Isolate::GetPageGraphInternal() const {
+  return page_graph_;
+}
+#endif
+
 #ifdef V8_INTL_SUPPORT
 icu::UObject* Isolate::get_cached_icu_object(ICUObjectCacheType cache_type) {
   return icu_object_cache_[cache_type].get();
diff --git a/src/isolate.h b/src/isolate.h
index 2b1612a957..e86a6db331 100644
--- a/src/isolate.h
+++ b/src/isolate.h
@@ -41,6 +41,13 @@ class UObject;
 }  // namespace U_ICU_NAMESPACE
 #endif  // V8_INTL_SUPPORT
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+namespace brave_page_graph {
+class PageGraph;
+}
+#endif
+
 namespace v8 {
 
 namespace base {
@@ -1502,6 +1509,10 @@ class Isolate final : private HiddenFactory {
   }
 
   V8_EXPORT_PRIVATE void SetIdle(bool is_idle);
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  void SetPageGraphInternal(::brave_page_graph::PageGraph* page_graph);
+  ::brave_page_graph::PageGraph* GetPageGraphInternal() const;
+#endif
 
  private:
   explicit Isolate(std::unique_ptr<IsolateAllocator> isolate_allocator);
@@ -1834,6 +1845,9 @@ class Isolate final : private HiddenFactory {
   friend class TestSerializer;
 
   DISALLOW_COPY_AND_ASSIGN(Isolate);
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  ::brave_page_graph::PageGraph* page_graph_ = nullptr;
+#endif
 };
 
 #undef FIELD_ACCESSOR
diff --git a/src/vm-state-inl.h b/src/vm-state-inl.h
index d22e1abd69..0ac2de7ca6 100644
--- a/src/vm-state-inl.h
+++ b/src/vm-state-inl.h
@@ -10,9 +10,72 @@
 #include "src/simulator.h"
 #include "src/tracing/trace-event.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include <string>
+#include "src/string-stream.h"
+#include "src/frames-inl.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace v8 {
 namespace internal {
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+inline int GetExecutingScriptId(Isolate* isolate) {
+  int script_id = 0;
+
+  ::brave_page_graph::PageGraph* page_graph = isolate->GetPageGraphInternal();
+  if (page_graph == nullptr) {
+    return script_id;
+  }
+  StackTraceFrameIterator it(isolate);
+
+  while (!it.done()) {
+    if (!it.is_javascript()) {
+      it.Advance();
+      continue;
+    }
+
+    JavaScriptFrame* frame = it.javascript_frame();
+    Handle<JSFunction> function(frame->function(), isolate);
+    if (function->context()->IsEvalContext()) {
+      it.Advance();
+      continue;
+    }
+
+    Object maybe_script = function->shared()->script();
+    if (!maybe_script->IsScript()) {
+      it.Advance();
+      continue;
+    }
+
+    Script script = Script::cast(maybe_script);
+    if (script.has_eval_from_shared()) {
+      it.Advance();
+      continue;
+    }
+
+    Object name_or_url = script.GetNameOrSourceURL();
+    if (name_or_url.IsString()) {
+      static size_t prev_string_len;
+      HeapStringAllocator allocator;
+      StringStream string_builder(&allocator);
+      String str = String::cast(name_or_url);
+      str.StringShortPrint(&string_builder);
+      std::string script_name = std::string(string_builder.ToCString().get());
+      if (script_name.size() != prev_string_len) {
+        prev_string_len = script_name.size();
+        page_graph->Log(script_name);
+      }
+    }
+    script_id = script->id();
+    break;
+  }
+  return script_id;
+}
+#endif
+
 //
 // VMState class implementation.  A simple stack of VM states held by the
 // logger and partially threaded through the call stack.  States are pushed by
@@ -68,12 +131,26 @@ ExternalCallbackScope::ExternalCallbackScope(Isolate* isolate, Address callback)
   isolate_->set_external_callback_scope(this);
   TRACE_EVENT_BEGIN0(TRACE_DISABLED_BY_DEFAULT("v8.runtime"),
                      "V8.ExternalCallback");
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  const int script_id = GetExecutingScriptId(isolate);
+  if (script_id != 0) {
+    ::brave_page_graph::PageGraph* page_graph = isolate->GetPageGraphInternal();
+    page_graph->RegisterScriptExecStart(script_id);
+  }
+#endif
 }
 
 ExternalCallbackScope::~ExternalCallbackScope() {
   isolate_->set_external_callback_scope(previous_scope_);
   TRACE_EVENT_END0(TRACE_DISABLED_BY_DEFAULT("v8.runtime"),
                    "V8.ExternalCallback");
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  const int script_id = GetExecutingScriptId(isolate_);
+  if (script_id != 0) {
+    ::brave_page_graph::PageGraph* page_graph = isolate_->GetPageGraphInternal();
+    page_graph->RegisterScriptExecStop(script_id);
+  }
+#endif
 }
 
 Address ExternalCallbackScope::scope_address() {
